package k8sprometheus_test

import (
	"bytes"
	"context"
	"fmt"
	"testing"

	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	"github.com/prometheus/prometheus/model/rulefmt"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/intstr"

	"github.com/slok/sloth/internal/k8sprometheus"
	"github.com/slok/sloth/internal/k8sprometheus/k8sprometheusmock"
	"github.com/slok/sloth/internal/log"
	"github.com/slok/sloth/internal/prometheus"
)

func TestIOWriterPrometheusOperatorYAMLRepo(t *testing.T) {
	tests := map[string]struct {
		k8sMeta k8sprometheus.K8sMeta
		slos    []k8sprometheus.StorageSLO
		expYAML string
		expErr  bool
	}{
		"Having 0 SLO rules should fail.": {
			k8sMeta: k8sprometheus.K8sMeta{},
			slos:    []k8sprometheus.StorageSLO{},
			expErr:  true,
		},

		"Having 0 SLO rules generated should fail.": {
			k8sMeta: k8sprometheus.K8sMeta{},
			slos: []k8sprometheus.StorageSLO{
				{},
			},
			expErr: true,
		},

		"Having a single SLI recording rule should render correctly.": {
			k8sMeta: k8sprometheus.K8sMeta{
				Name:        "test-name",
				Namespace:   "test-ns",
				Labels:      map[string]string{"lk1": "lv1"},
				Annotations: map[string]string{"ak1": "av1"},
			},
			slos: []k8sprometheus.StorageSLO{
				{
					SLO: prometheus.SLO{ID: "test1"},
					Rules: prometheus.SLORules{
						SLIErrorRecRules: []rulefmt.Rule{
							{
								Record: "test:record",
								Expr:   "test-expr",
								Labels: map[string]string{"test-label": "one"},
							},
						},
					},
				},
			},
			expYAML: `
---
# Code generated by Sloth (dev): https://github.com/slok/sloth.
# DO NOT EDIT.

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  annotations:
    ak1: av1
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: SLO
    app.kubernetes.io/managed-by: sloth
    lk1: lv1
  name: test-name
  namespace: test-ns
spec:
  groups:
  - name: sloth-slo-sli-recordings-test1
    rules:
    - expr: test-expr
      labels:
        test-label: one
      record: test:record
`,
		},

		"Having a single metadata recording rule should render correctly.": {
			k8sMeta: k8sprometheus.K8sMeta{
				Name:        "test-name",
				Namespace:   "test-ns",
				Labels:      map[string]string{"lk1": "lv1"},
				Annotations: map[string]string{"ak1": "av1"},
			},
			slos: []k8sprometheus.StorageSLO{
				{
					SLO: prometheus.SLO{ID: "test1"},
					Rules: prometheus.SLORules{
						MetadataRecRules: []rulefmt.Rule{
							{
								Record: "test:record",
								Expr:   "test-expr",
								Labels: map[string]string{"test-label": "one"},
							},
						},
					},
				},
			},
			expYAML: `
---
# Code generated by Sloth (dev): https://github.com/slok/sloth.
# DO NOT EDIT.

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  annotations:
    ak1: av1
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: SLO
    app.kubernetes.io/managed-by: sloth
    lk1: lv1
  name: test-name
  namespace: test-ns
spec:
  groups:
  - name: sloth-slo-meta-recordings-test1
    rules:
    - expr: test-expr
      labels:
        test-label: one
      record: test:record
`,
		},

		"Having a single SLO alert rule should render correctly.": {
			k8sMeta: k8sprometheus.K8sMeta{
				Name:        "test-name",
				Namespace:   "test-ns",
				Labels:      map[string]string{"lk1": "lv1"},
				Annotations: map[string]string{"ak1": "av1"},
			},
			slos: []k8sprometheus.StorageSLO{
				{
					SLO: prometheus.SLO{ID: "test1"},
					Rules: prometheus.SLORules{
						AlertRules: []rulefmt.Rule{
							{
								Alert:       "testAlert",
								Expr:        "test-expr",
								Labels:      map[string]string{"test-label": "one"},
								Annotations: map[string]string{"test-annot": "one"},
							},
						},
					},
				},
			},
			expYAML: `
---
# Code generated by Sloth (dev): https://github.com/slok/sloth.
# DO NOT EDIT.

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  annotations:
    ak1: av1
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: SLO
    app.kubernetes.io/managed-by: sloth
    lk1: lv1
  name: test-name
  namespace: test-ns
spec:
  groups:
  - name: sloth-slo-alerts-test1
    rules:
    - alert: testAlert
      annotations:
        test-annot: one
      expr: test-expr
      labels:
        test-label: one
`,
		},

		"Having a multiple SLO alert and recording rules should render correctly.": {
			k8sMeta: k8sprometheus.K8sMeta{
				Name:        "test-name",
				Namespace:   "test-ns",
				Labels:      map[string]string{"lk1": "lv1"},
				Annotations: map[string]string{"ak1": "av1"},
			},
			slos: []k8sprometheus.StorageSLO{

				{
					SLO: prometheus.SLO{ID: "testa"},
					Rules: prometheus.SLORules{
						SLIErrorRecRules: []rulefmt.Rule{
							{
								Record: "test:record-a1",
								Expr:   "test-expr-a1",
								Labels: map[string]string{"test-label": "a-1"},
							},
							{
								Record: "test:record-a2",
								Expr:   "test-expr-a2",
								Labels: map[string]string{"test-label": "a-2"},
							},
						},
						MetadataRecRules: []rulefmt.Rule{
							{
								Record: "test:record-a3",
								Expr:   "test-expr-a3",
								Labels: map[string]string{"test-label": "a-3"},
							},
							{
								Record: "test:record-a4",
								Expr:   "test-expr-a4",
								Labels: map[string]string{"test-label": "a-4"},
							},
						},
						AlertRules: []rulefmt.Rule{
							{
								Alert:       "testAlertA1",
								Expr:        "test-expr-a1",
								Labels:      map[string]string{"test-label": "a-1"},
								Annotations: map[string]string{"test-annot": "a-1"},
							},
							{
								Alert:       "testAlertA2",
								Expr:        "test-expr-a2",
								Labels:      map[string]string{"test-label": "a-2"},
								Annotations: map[string]string{"test-annot": "a-2"},
							},
						},
					},
				},
				{
					SLO: prometheus.SLO{ID: "testb"},
					Rules: prometheus.SLORules{
						SLIErrorRecRules: []rulefmt.Rule{
							{
								Record: "test:record-b1",
								Expr:   "test-expr-b1",
								Labels: map[string]string{"test-label": "b-1"},
							},
						},
						MetadataRecRules: []rulefmt.Rule{
							{
								Record: "test:record-b2",
								Expr:   "test-expr-b2",
								Labels: map[string]string{"test-label": "b-2"},
							},
						},
						AlertRules: []rulefmt.Rule{
							{
								Alert:       "testAlertB1",
								Expr:        "test-expr-b1",
								Labels:      map[string]string{"test-label": "b-1"},
								Annotations: map[string]string{"test-annot": "b-1"},
							},
						},
					},
				},
			},
			expYAML: `
---
# Code generated by Sloth (dev): https://github.com/slok/sloth.
# DO NOT EDIT.

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  annotations:
    ak1: av1
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: SLO
    app.kubernetes.io/managed-by: sloth
    lk1: lv1
  name: test-name
  namespace: test-ns
spec:
  groups:
  - name: sloth-slo-sli-recordings-testa
    rules:
    - expr: test-expr-a1
      labels:
        test-label: a-1
      record: test:record-a1
    - expr: test-expr-a2
      labels:
        test-label: a-2
      record: test:record-a2
  - name: sloth-slo-meta-recordings-testa
    rules:
    - expr: test-expr-a3
      labels:
        test-label: a-3
      record: test:record-a3
    - expr: test-expr-a4
      labels:
        test-label: a-4
      record: test:record-a4
  - name: sloth-slo-alerts-testa
    rules:
    - alert: testAlertA1
      annotations:
        test-annot: a-1
      expr: test-expr-a1
      labels:
        test-label: a-1
    - alert: testAlertA2
      annotations:
        test-annot: a-2
      expr: test-expr-a2
      labels:
        test-label: a-2
  - name: sloth-slo-sli-recordings-testb
    rules:
    - expr: test-expr-b1
      labels:
        test-label: b-1
      record: test:record-b1
  - name: sloth-slo-meta-recordings-testb
    rules:
    - expr: test-expr-b2
      labels:
        test-label: b-2
      record: test:record-b2
  - name: sloth-slo-alerts-testb
    rules:
    - alert: testAlertB1
      annotations:
        test-annot: b-1
      expr: test-expr-b1
      labels:
        test-label: b-1
`,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			assert := assert.New(t)

			var gotYAML bytes.Buffer
			repo := k8sprometheus.NewIOWriterPrometheusOperatorYAMLRepo(&gotYAML, log.Noop)
			err := repo.StoreSLOs(context.TODO(), test.k8sMeta, test.slos)

			if test.expErr {
				assert.Error(err)
			} else if assert.NoError(err) {
				assert.Equal(test.expYAML, gotYAML.String())
			}
		})
	}
}

func TestPrometheusOperatorCRDRepo(t *testing.T) {
	tests := map[string]struct {
		k8sMeta k8sprometheus.K8sMeta
		slos    []k8sprometheus.StorageSLO
		mock    func(m *k8sprometheusmock.PrometheusRulesEnsurer)
		expErr  bool
	}{
		"Having 0 SLO rules should fail.": {
			k8sMeta: k8sprometheus.K8sMeta{},
			slos:    []k8sprometheus.StorageSLO{},
			mock:    func(m *k8sprometheusmock.PrometheusRulesEnsurer) {},
			expErr:  true,
		},

		"Having 0 SLO rules generated should fail.": {
			k8sMeta: k8sprometheus.K8sMeta{},
			slos: []k8sprometheus.StorageSLO{
				{},
			},
			mock:   func(m *k8sprometheusmock.PrometheusRulesEnsurer) {},
			expErr: true,
		},

		"Having an error while storing Prometheus operator rules should fail.": {
			k8sMeta: k8sprometheus.K8sMeta{},
			slos: []k8sprometheus.StorageSLO{
				{
					SLO: prometheus.SLO{ID: "testa"},
					Rules: prometheus.SLORules{
						SLIErrorRecRules: []rulefmt.Rule{
							{Record: "test:record-a1"},
						},
					},
				},
			},
			mock: func(m *k8sprometheusmock.PrometheusRulesEnsurer) {
				m.On("EnsurePrometheusRule", mock.Anything, mock.Anything).Once().Return(fmt.Errorf("something"))
			},
			expErr: true,
		},

		"Having multiple SLO alert and recording rules should ensure on Kubernetes correctly.": {
			k8sMeta: k8sprometheus.K8sMeta{
				Name:        "test-name",
				Namespace:   "test-ns",
				Labels:      map[string]string{"lk1": "lv1"},
				Annotations: map[string]string{"ak1": "av1"},
				Kind:        "test-kind",
				APIVersion:  "test-apiversion",
				UID:         "test-uid",
			},
			slos: []k8sprometheus.StorageSLO{
				{
					SLO: prometheus.SLO{ID: "testa"},
					Rules: prometheus.SLORules{
						SLIErrorRecRules: []rulefmt.Rule{
							{
								Record: "test:record-a1",
								Expr:   "test-expr-a1",
								Labels: map[string]string{"test-label": "a-1"},
							},
							{
								Record: "test:record-a2",
								Expr:   "test-expr-a2",
								Labels: map[string]string{"test-label": "a-2"},
							},
						},
						MetadataRecRules: []rulefmt.Rule{
							{
								Record: "test:record-a3",
								Expr:   "test-expr-a3",
								Labels: map[string]string{"test-label": "a-3"},
							},
							{
								Record: "test:record-a4",
								Expr:   "test-expr-a4",
								Labels: map[string]string{"test-label": "a-4"},
							},
						},
						AlertRules: []rulefmt.Rule{
							{
								Alert:       "testAlertA1",
								Expr:        "test-expr-a1",
								Labels:      map[string]string{"test-label": "a-1"},
								Annotations: map[string]string{"test-annot": "a-1"},
							},
							{
								Alert:       "testAlertA2",
								Expr:        "test-expr-a2",
								Labels:      map[string]string{"test-label": "a-2"},
								Annotations: map[string]string{"test-annot": "a-2"},
							},
						},
					},
				},
				{
					SLO: prometheus.SLO{ID: "testb"},
					Rules: prometheus.SLORules{
						SLIErrorRecRules: []rulefmt.Rule{
							{
								Record: "test:record-b1",
								Expr:   "test-expr-b1",
								Labels: map[string]string{"test-label": "b-1"},
							},
						},
						MetadataRecRules: []rulefmt.Rule{
							{
								Record: "test:record-b2",
								Expr:   "test-expr-b2",
								Labels: map[string]string{"test-label": "b-2"},
							},
						},
						AlertRules: []rulefmt.Rule{
							{
								Alert:       "testAlertB1",
								Expr:        "test-expr-b1",
								Labels:      map[string]string{"test-label": "b-1"},
								Annotations: map[string]string{"test-annot": "b-1"},
							},
						},
					},
				},
			},
			mock: func(m *k8sprometheusmock.PrometheusRulesEnsurer) {
				exp := &monitoringv1.PrometheusRule{
					TypeMeta: metav1.TypeMeta{
						APIVersion: "monitoring.coreos.com/v1",
						Kind:       "PrometheusRule",
					},
					ObjectMeta: metav1.ObjectMeta{
						Name:      "test-name",
						Namespace: "test-ns",
						Labels: map[string]string{
							"lk1":                          "lv1",
							"app.kubernetes.io/component":  "SLO",
							"app.kubernetes.io/managed-by": "sloth",
						},
						Annotations: map[string]string{"ak1": "av1"},
						OwnerReferences: []metav1.OwnerReference{
							{
								Kind:       "test-kind",
								APIVersion: "test-apiversion",
								Name:       "test-name",
								UID:        types.UID("test-uid"),
							},
						},
					},
					Spec: monitoringv1.PrometheusRuleSpec{
						Groups: []monitoringv1.RuleGroup{
							{
								Name: "sloth-slo-sli-recordings-testa",
								Rules: []monitoringv1.Rule{
									{
										Record: "test:record-a1",
										Expr:   intstr.FromString("test-expr-a1"),
										Labels: map[string]string{"test-label": "a-1"},
									},
									{
										Record: "test:record-a2",
										Expr:   intstr.FromString("test-expr-a2"),
										Labels: map[string]string{"test-label": "a-2"},
									},
								},
							},
							{
								Name: "sloth-slo-meta-recordings-testa",
								Rules: []monitoringv1.Rule{
									{
										Record: "test:record-a3",
										Expr:   intstr.FromString("test-expr-a3"),
										Labels: map[string]string{"test-label": "a-3"},
									},
									{
										Record: "test:record-a4",
										Expr:   intstr.FromString("test-expr-a4"),
										Labels: map[string]string{"test-label": "a-4"},
									},
								},
							},
							{
								Name: "sloth-slo-alerts-testa",
								Rules: []monitoringv1.Rule{
									{
										Alert:       "testAlertA1",
										Expr:        intstr.FromString("test-expr-a1"),
										Labels:      map[string]string{"test-label": "a-1"},
										Annotations: map[string]string{"test-annot": "a-1"},
									},
									{
										Alert:       "testAlertA2",
										Expr:        intstr.FromString("test-expr-a2"),
										Labels:      map[string]string{"test-label": "a-2"},
										Annotations: map[string]string{"test-annot": "a-2"},
									},
								},
							},
							{
								Name: "sloth-slo-sli-recordings-testb",
								Rules: []monitoringv1.Rule{
									{
										Record: "test:record-b1",
										Expr:   intstr.FromString("test-expr-b1"),
										Labels: map[string]string{"test-label": "b-1"},
									},
								},
							},
							{
								Name: "sloth-slo-meta-recordings-testb",
								Rules: []monitoringv1.Rule{
									{
										Record: "test:record-b2",
										Expr:   intstr.FromString("test-expr-b2"),
										Labels: map[string]string{"test-label": "b-2"},
									},
								},
							},
							{
								Name: "sloth-slo-alerts-testb",
								Rules: []monitoringv1.Rule{
									{
										Alert:       "testAlertB1",
										Expr:        intstr.FromString("test-expr-b1"),
										Labels:      map[string]string{"test-label": "b-1"},
										Annotations: map[string]string{"test-annot": "b-1"},
									},
								},
							},
						},
					},
				}
				m.On("EnsurePrometheusRule", mock.Anything, exp).Once().Return(nil)
			},
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			assert := assert.New(t)

			// Mocks.
			mpre := &k8sprometheusmock.PrometheusRulesEnsurer{}
			test.mock(mpre)

			repo := k8sprometheus.NewPrometheusOperatorCRDRepo(mpre, log.Noop)
			err := repo.StoreSLOs(context.TODO(), test.k8sMeta, test.slos)

			if test.expErr {
				assert.Error(err)
			} else {
				assert.NoError(err)
			}
			mpre.AssertExpectations(t)
		})
	}
}
