// Code generated by mockery v2.14.0. DO NOT EDIT.

package prometheusmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	regexp "regexp"
)

// FileManager is an autogenerated mock type for the FileManager type
type FileManager struct {
	mock.Mock
}

// FindFiles provides a mock function with given fields: ctx, root, matcher
func (_m *FileManager) FindFiles(ctx context.Context, root string, matcher *regexp.Regexp) ([]string, error) {
	ret := _m.Called(ctx, root, matcher)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, *regexp.Regexp) []string); ok {
		r0 = rf(ctx, root, matcher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *regexp.Regexp) error); ok {
		r1 = rf(ctx, root, matcher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFile provides a mock function with given fields: ctx, path
func (_m *FileManager) ReadFile(ctx context.Context, path string) ([]byte, error) {
	ret := _m.Called(ctx, path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileManager creates a new instance of FileManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileManager(t mockConstructorTestingTNewFileManager) *FileManager {
	mock := &FileManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
